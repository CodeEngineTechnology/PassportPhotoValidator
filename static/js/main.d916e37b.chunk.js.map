{"version":3,"sources":["logo.svg","Upload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Upload","props","state","files","Result","ifPerson","fileUpload","bind","this","setState","console","log","fetch","method","headers","Accept","body","JSON","stringify","photo","response","json","undefined","parse","className","multiple","onDone","getFiles","src","base64","width","Button","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,mOCiG5BC,G,wDA3FX,WAAYC,GAAO,IAAD,8BACd,gBACKC,MAAQ,CACTC,MAAQ,GACRC,OAAS,GACTC,SAAW,IAGf,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBARJ,E,qDAWTJ,GACLK,KAAKC,SAAS,CAACN,MAAOA,IACtBO,QAAQC,IAAIR,K,qKAKWS,MAAO,4EAA6E,CACvGC,OAAS,OACTC,QAAU,CACNC,OAAS,mBACT,eAAiB,oBAErBC,KAAOC,KAAKC,UAAU,CAACC,MAAQX,KAAKN,MAAMC,MAAX,W,cAN7BiB,E,gBAWcA,EAASC,O,OAAvBjB,E,OACNI,KAAKC,SAAS,CAACL,OAAOA,EAAOY,YAGSM,IAFlBL,KAAKM,MAAMf,KAAKN,MAAME,QAE3B,YAAgB,GAC3BI,KAAKC,SAAS,CAACJ,SAAW,0DAG1BG,KAAKC,SAAS,CAACJ,SAAW,qC,qIAQ9B,IAAMA,EAASG,KAAKN,MAAMG,SAC1B,OAEQ,6BACK,yBAAKmB,UAAU,OACZ,yBAAKA,UAAU,kBACX,2DAKR,yBAAKA,UAAU,OACV,yBAAKA,UAAU,wBACZ,kBAAC,IAAD,CAAYC,UAAU,EAAOC,OAAQlB,KAAKmB,SAASpB,KAAKC,UAKhE,yBAAKgB,UAAU,OACX,yBAAKA,UAAU,mBACT,yBAAKI,IAAKpB,KAAKN,MAAMC,MAAM0B,OAAQC,MAAM,UAMnD,yBAAKN,UAAU,OACX,yBAAKA,UAAU,kBACX,kBAACO,EAAA,EAAD,CAAQP,UAAU,kCAAkCQ,QAASxB,KAAKF,YAAlE,sBAIR,yBAAKkB,UAAU,OACX,yBAAKA,UAAU,kBACNnB,S,GAhFZ4B,cCSNC,MARf,WACE,OACE,6BACI,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.d916e37b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport {Button,Form, FormGroup} from 'reactstrap';\r\nimport FileBase64 from \"react-file-base64\";\r\nimport './Upload.css';\r\n\r\nclass Upload extends Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = { \r\n            files : [],\r\n            Result : [],\r\n            ifPerson : '',\r\n        }\r\n        \r\n        this.fileUpload = this.fileUpload.bind(this);\r\n    }\r\n\r\n    getFiles(files){\r\n        this.setState({files: files});\r\n        console.log(files);\r\n    }\r\n\r\n\r\n    async fileUpload(){\r\n        const response = await fetch ('https://1lwqomm8u3.execute-api.us-east-1.amazonaws.com/Prod/passportphoto', {\r\n            method : \"POST\",\r\n            headers : {\r\n                Accept : \"application/json\",\r\n                \"Content-type\" : \"application/json\"\r\n            },\r\n            body : JSON.stringify({photo : this.state.files['base64']})\r\n        }\r\n         \r\n        ) \r\n\r\n        const Result= await response.json();\r\n        this.setState({Result:Result.body})\r\n        const FaceDetails = JSON.parse(this.state.Result);\r\n\r\n        if (FaceDetails['FaceDetails'][0] === undefined )\r\n            this.setState({ifPerson : 'Sorry, Looks like you just uploaded an invalid photo!'})\r\n            \r\n        else {\r\n            this.setState({ifPerson : 'Thanks for uploading your photo!'})\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    render() { \r\n        const ifPerson=this.state.ifPerson\r\n        return ( \r\n            \r\n                <div>\r\n                     <div className=\"row\">\r\n                        <div className=\"col-6 offset-3\">\r\n                            <h4>Passport Photo Validator!</h4>\r\n                        </div>\r\n                    </div>   \r\n\r\n\r\n                    <div className=\"row\">\r\n                         <div className=\"files col-6 offset-3\">\r\n                            <FileBase64 multiple={false} onDone={this.getFiles.bind(this)} />\r\n                        </div>\r\n                    </div>   \r\n\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 offset-3 \">\r\n                              <img src={this.state.files.base64} width=\"40%\" />\r\n                        </div>\r\n                    </div>   \r\n\r\n\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 offset-3\">\r\n                            <Button className=\"btn btn-lg btn-danger btn-block\" onClick={this.fileUpload} >Verify My Photo!</Button>\r\n                        </div>\r\n                    </div>                       \r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 offset-3\">\r\n                                {ifPerson}\r\n                        </div>\r\n                    </div>                       \r\n\r\n\r\n                    \r\n\r\n                </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Upload;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Upload from './Upload.js';\n\nfunction App() {\n  return (\n    <div>\n        <Upload />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}